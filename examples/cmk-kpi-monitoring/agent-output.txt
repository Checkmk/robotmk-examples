<<<check_mk>>>
Version: 2.4.0-2025.01.16
BuildDate: Jan 16 2025
AgentOS: windows
Hostname: DESKTOP-RGL29KA
Architecture: 64bit
OSName: Microsoft Windows 11 Enterprise Evaluation
OSVersion: 10.0.22621
OSType: windows
Time: 2025-01-16T07:32:00-0800
WorkingDirectory: C:\Windows\system32
ConfigFile: C:\Program Files (x86)\checkmk\service\check_mk.yml
LocalConfigFile: C:\ProgramData\checkmk\agent\check_mk.user.yml
AgentDirectory: C:\Program Files (x86)\checkmk\service
PluginsDirectory: C:\ProgramData\checkmk\agent\plugins
StateDirectory: C:\ProgramData\checkmk\agent\state
ConfigDirectory: C:\ProgramData\checkmk\agent\config
TempDirectory: C:\ProgramData\checkmk\agent\tmp
LogDirectory: C:\ProgramData\checkmk\agent\log
SpoolDirectory: C:\ProgramData\checkmk\agent\spool
LocalDirectory: C:\ProgramData\checkmk\agent\local
OnlyFrom: 
<<<cmk_agent_ctl_status:sep(0)>>>
{"version":"2.4.0b1","agent_socket_operational":true,"ip_allowlist":[],"allow_legacy_pull":true,"connections":[]}
<<<wmi_cpuload:sep(124)>>>
[system_perf]
Name|ProcessorQueueLength|Timestamp_PerfTime|Frequency_PerfTime|WMIStatus
|0|20231751562|10000000|OK
[computer_system]
Name|NumberOfLogicalProcessors|NumberOfProcessors|WMIStatus
DESKTOP-RGL29KA|4|1|OK
<<<uptime>>>
2023
<<<mem>>>
MemTotal:      4177604 kB
MemFree:       1332536 kB
SwapTotal:     1114112 kB
SwapFree:      893576 kB
PageTotal:     5291716 kB
PageFree:      2226112 kB
VirtualTotal:  137438953344 kB
VirtualFree:   137434619076 kB
<<<fileinfo:sep(124)>>>
1737041519
<<<df:sep(9)>>>
C:\	NTFS	132524028	34601852	97922176	27%	C:\
<<<logwatch>>>
[[[Application]]]
[[[HardwareEvents]]]
[[[Internet Explorer]]]
[[[Key Management Service]]]
[[[Security]]]
[[[System]]]
[[[Windows PowerShell]]]
<<<winperf_phydisk>>>
1737041519.37 234 10000000
2 instances: 0_C: _Total
-36 0 0 rawcount
-34 1049455680 1049455680 type(542573824)
-34 133815151193685138 133815151193685138 type(1073939712)
1166 1049455680 1049455680 type(5571840)
-32 782814863 782814863 type(542573824)
-32 133815151193685138 133815151193685138 type(1073939712)
1168 782814863 782814863 type(5571840)
-30 266640817 266640817 type(542573824)
-30 133815151193685138 133815151193685138 type(1073939712)
1170 266640817 266640817 type(5571840)
-28 1049455680 1049455680 average_timer
-28 241190 241190 average_base
-26 782814863 782814863 average_timer
-26 90860 90860 average_base
-24 266640817 266640817 average_timer
-24 150330 150330 average_base
-22 241190 241190 counter
-20 90860 90860 counter
-18 150330 150330 counter
-16 9539494912 9539494912 bulk_count
-14 3788910080 3788910080 bulk_count
-12 5750584832 5750584832 bulk_count
-10 9539494912 9539494912 average_bulk
-10 241190 241190 average_base
-8 3788910080 3788910080 average_bulk
-8 90860 90860 average_base
-6 5750584832 5750584832 average_bulk
-6 150330 150330 average_base
1248 19723045146 19723045146 type(542573824)
1248 133815151193685138 133815151193685138 type(1073939712)
1250 22995 22995 counter
<<<winperf_if>>>
1737041519.37 510 10000000
2 instances: Intel[R]_PRO_1000_MT_Desktop_Adapter Intel[R]_PRO_1000_MT_Desktop_Adapter__2
-122 155603312 56469989 bulk_count
-110 156537 39326 bulk_count
-244 106599 36116 bulk_count
-58 49938 3210 bulk_count
10 1000000000 1000000000 large_rawcount
-246 151552786 51901119 bulk_count
14 106599 35809 bulk_count
16 0 307 bulk_count
18 0 0 large_rawcount
20 0 0 large_rawcount
22 0 0 large_rawcount
-4 4050526 4568870 bulk_count
26 49659 2953 bulk_count
28 279 257 bulk_count
30 0 0 large_rawcount
32 0 0 large_rawcount
34 0 0 large_rawcount
1086 0 0 large_rawcount
1088 0 0 large_rawcount
1090 0 0 bulk_count
1092 0 0 bulk_count
1094 0 0 large_rawcount
2002 1 1 text
2006 08:00:27:31:0F:08:00:00 08:00:27:DF:6E:2D:00:00 text
<<<winperf_processor>>>
1737041519.39 238 10000000
5 instances: 0 1 2 3 _Total
-232 17278750000 17853281250 17937968750 17307187500 17594296875 100nsec_timer_inv
-96 1517968750 1334843750 1311093750 1446875000 1402695312 100nsec_timer
-94 1435000000 1043593750 982500000 1477656250 1234687500 100nsec_timer
-90 2885277 1951616 2039558 2217369 9093820 counter
458 8281250 15312500 17031250 41562500 20546875 100nsec_timer
460 16562500 22500000 33437500 60468750 33242187 100nsec_timer
1096 97568 87816 78264 227388 491036 counter
1098 0 0 0 0 0 rawcount
1508 16892527383 17853159050 17956181764 17167954053 17467455562 100nsec_timer
1510 16892527383 17853159050 17956181764 17167954053 17467455562 100nsec_timer
1512 0 0 0 0 0 100nsec_timer
1514 0 0 0 0 0 100nsec_timer
1516 1987973 1416998 1515829 1568743 6489543 bulk_count
1518 0 0 0 0 0 bulk_count
1520 0 0 0 0 0 bulk_count
<<<checkmk_agent_plugins_win:sep(0)>>>
pluginsdir C:\ProgramData\checkmk\agent\plugins
localdir C:\ProgramData\checkmk\agent\local
C:\ProgramData\checkmk\agent\plugins\robotmk_agent_plugin.exe:CMK_VERSION = n/a
<<<services>>>
AJRouter stopped/demand AllJoyn Router Service
ALG stopped/demand Application Layer Gateway Service
AppIDSvc stopped/demand Application Identity
Appinfo running/demand Application Information
AppMgmt stopped/demand Application Management
AppReadiness stopped/demand App Readiness
AppVClient stopped/disabled Microsoft App-V Client
AppXSvc stopped/demand AppX Deployment Service (AppXSVC)
AssignedAccessManagerSvc stopped/demand AssignedAccessManager Service
AudioEndpointBuilder running/auto Windows Audio Endpoint Builder
Audiosrv running/auto Windows Audio
autotimesvc stopped/demand Cellular Time
AxInstSV stopped/demand ActiveX Installer (AxInstSV)
BDESVC stopped/demand BitLocker Drive Encryption Service
BFE running/auto Base Filtering Engine
BITS stopped/demand Background Intelligent Transfer Service
BrokerInfrastructure running/auto Background Tasks Infrastructure Service
BTAGService stopped/demand Bluetooth Audio Gateway Service
BthAvctpSvc stopped/demand AVCTP service
bthserv stopped/demand Bluetooth Support Service
camsvc running/demand Capability Access Manager Service
CDPSvc running/auto Connected Devices Platform Service
CertPropSvc running/demand Certificate Propagation
ClipSVC stopped/demand Client License Service (ClipSVC)
cloudidsvc stopped/demand Microsoft Cloud Identity Service
COMSysApp stopped/demand COM+ System Application
CoreMessagingRegistrar running/auto CoreMessaging
CryptSvc running/auto Cryptographic Services
CscService stopped/demand Offline Files
DcomLaunch running/auto DCOM Server Process Launcher
dcsvc stopped/demand dcsvc
defragsvc stopped/demand Optimize drives
DeviceAssociationService stopped/demand Device Association Service
DeviceInstall stopped/demand Device Install Service
DevQueryBroker stopped/demand DevQuery Background Discovery Broker
Dhcp running/auto DHCP Client
diagnosticshub.standardcollector.service stopped/demand Microsoft (R) Diagnostics Hub Standard Collector Service
diagsvc stopped/demand Diagnostic Execution Service
DiagTrack running/auto Connected User Experiences and Telemetry
DialogBlockingService stopped/disabled DialogBlockingService
DispBrokerDesktopSvc running/auto Display Policy Service
DisplayEnhancementService running/demand Display Enhancement Service
DmEnrollmentSvc stopped/demand Device Management Enrollment Service
dmwappushservice stopped/demand Device Management Wireless Application Protocol (WAP) Push message Routing Service
Dnscache running/auto DNS Client
DoSvc stopped/auto Delivery Optimization
dot3svc stopped/demand Wired AutoConfig
DPS running/auto Diagnostic Policy Service
DsmSvc stopped/demand Device Setup Manager
DsSvc stopped/demand Data Sharing Service
DusmSvc running/auto Data Usage
EapHost stopped/demand Extensible Authentication Protocol
edgeupdate stopped/auto Microsoft Edge Update Service (edgeupdate)
edgeupdatem stopped/demand Microsoft Edge Update Service (edgeupdatem)
EFS stopped/demand Encrypting File System (EFS)
embeddedmode stopped/demand Embedded Mode
EntAppSvc stopped/demand Enterprise App Management Service
EventLog running/auto Windows Event Log
EventSystem running/auto COM+ Event System
fdPHost stopped/demand Function Discovery Provider Host
FDResPub stopped/demand Function Discovery Resource Publication
fhsvc stopped/demand File History Service
FontCache running/auto Windows Font Cache Service
FrameServer stopped/demand Windows Camera Frame Server
FrameServerMonitor stopped/demand Windows Camera Frame Server Monitor
GoogleChromeElevationService stopped/demand Google Chrome Elevation Service (GoogleChromeElevationService)
GoogleUpdaterInternalService132.0.6833.0 stopped/auto Google Updater Internal Service (GoogleUpdaterInternalService132.0.6833.0)
GoogleUpdaterService132.0.6833.0 stopped/auto Google Updater Service (GoogleUpdaterService132.0.6833.0)
gpsvc stopped/auto Group Policy Client
GraphicsPerfSvc stopped/demand GraphicsPerfSvc
hidserv stopped/demand Human Interface Device Service
HvHost stopped/demand HV Host Service
icssvc stopped/demand Windows Mobile Hotspot Service
IKEEXT running/auto IKE and AuthIP IPsec Keying Modules
InstallService stopped/demand Microsoft Store Install Service
InventorySvc stopped/demand Inventory and Compatibility Appraisal service
iphlpsvc running/auto IP Helper
IpxlatCfgSvc stopped/demand IP Translation Configuration Service
KeyIso running/demand CNG Key Isolation
KtmRm stopped/demand KtmRm for Distributed Transaction Coordinator
LanmanServer running/auto Server
LanmanWorkstation running/auto Workstation
lfsvc stopped/demand Geolocation Service
LicenseManager running/demand Windows License Manager Service
lltdsvc stopped/demand Link-Layer Topology Discovery Mapper
lmhosts running/demand TCP/IP NetBIOS Helper
LSM running/auto Local Session Manager
LxpSvc stopped/demand Language Experience Service
MapsBroker stopped/auto Downloaded Maps Manager
McpManagementService stopped/demand McpManagementService
MDCoreSvc running/auto Microsoft Defender Core Service
MicrosoftEdgeElevationService stopped/demand Microsoft Edge Elevation Service (MicrosoftEdgeElevationService)
MixedRealityOpenXRSvc stopped/demand Windows Mixed Reality OpenXR Service
mpssvc running/auto Windows Defender Firewall
MSDTC stopped/demand Distributed Transaction Coordinator
MSiSCSI stopped/demand Microsoft iSCSI Initiator Service
msiserver stopped/demand Windows Installer
MsKeyboardFilter stopped/disabled Microsoft Keyboard Filter
NaturalAuthentication stopped/demand Natural Authentication
NcaSvc stopped/demand Network Connectivity Assistant
NcbService running/demand Network Connection Broker
NcdAutoSetup stopped/demand Network Connected Devices Auto-Setup
Netlogon stopped/demand Netlogon
Netman stopped/demand Network Connections
netprofm running/demand Network List Service
NetSetupSvc stopped/demand Network Setup Service
NetTcpPortSharing stopped/disabled Net.Tcp Port Sharing Service
NgcCtnrSvc stopped/demand Microsoft Passport Container
NgcSvc stopped/demand Microsoft Passport
NlaSvc stopped/demand Network Location Awareness
nsi running/auto Network Store Interface Service
p2pimsvc stopped/demand Peer Networking Identity Manager
p2psvc stopped/demand Peer Networking Grouping
PcaSvc running/auto Program Compatibility Assistant Service
PeerDistSvc stopped/demand BranchCache
perceptionsimulation stopped/demand Windows Perception Simulation Service
PerfHost stopped/demand Performance Counter DLL Host
PhoneSvc stopped/demand Phone Service
pla stopped/demand Performance Logs & Alerts
PlugPlay running/demand Plug and Play
PNRPAutoReg stopped/demand PNRP Machine Name Publication Service
PNRPsvc stopped/demand Peer Name Resolution Protocol
PolicyAgent running/demand IPsec Policy Agent
Power running/auto Power
PrintNotify stopped/demand Printer Extensions and Notifications
ProfSvc running/auto User Profile Service
PSEXESVC stopped/demand PSEXESVC
PushToInstall stopped/demand Windows PushToInstall Service
QWAVE stopped/demand Quality Windows Audio Video Experience
RasAuto stopped/demand Remote Access Auto Connection Manager
RasMan stopped/demand Remote Access Connection Manager
RemoteAccess stopped/disabled Routing and Remote Access
RemoteRegistry stopped/disabled Remote Registry
RetailDemo stopped/demand Retail Demo Service
RmSvc running/demand Radio Management Service
RpcEptMapper running/auto RPC Endpoint Mapper
RpcLocator stopped/demand Remote Procedure Call (RPC) Locator
RpcSs running/auto Remote Procedure Call (RPC)
SamSs running/auto Security Accounts Manager
SCardSvr stopped/demand Smart Card
ScDeviceEnum stopped/demand Smart Card Device Enumeration Service
Schedule running/auto Task Scheduler
SCPolicySvc stopped/demand Smart Card Removal Policy
SDRSVC stopped/demand Windows Backup
seclogon stopped/demand Secondary Logon
SecurityHealthService running/demand Windows Security Service
SEMgrSvc stopped/demand Payments and NFC/SE Manager
SENS running/auto System Event Notification Service
Sense stopped/demand Windows Defender Advanced Threat Protection Service
SensorDataService stopped/demand Sensor Data Service
SensorService stopped/demand Sensor Service
SensrSvc stopped/demand Sensor Monitoring Service
SessionEnv running/demand Remote Desktop Configuration
SgrmBroker stopped/disabled System Guard Runtime Monitor Broker
SharedAccess stopped/demand Internet Connection Sharing (ICS)
SharedRealitySvc stopped/demand Spatial Data Service
ShellHWDetection running/auto Shell Hardware Detection
shpamsvc stopped/disabled Shared PC Account Manager
smphost stopped/demand Microsoft Storage Spaces SMP
SmsRouter stopped/demand Microsoft Windows SMS Router Service.
SNMPTrap stopped/demand SNMP Trap
spectrum stopped/demand Windows Perception Service
Spooler running/auto Print Spooler
sppsvc running/auto Software Protection
SSDPSRV running/demand SSDP Discovery
ssh-agent stopped/disabled OpenSSH Authentication Agent
sshd running/auto sshd
SstpSvc stopped/demand Secure Socket Tunneling Protocol Service
StateRepository running/auto State Repository Service
StiSvc stopped/demand Windows Image Acquisition (WIA)
StorSvc running/auto Storage Service
svsvc stopped/demand Spot Verifier
swprv stopped/demand Microsoft Software Shadow Copy Provider
SysMain running/auto SysMain
SystemEventsBroker running/auto System Events Broker
TapiSrv stopped/demand Telephony
TermService running/demand Remote Desktop Services
TextInputManagementService running/auto Text Input Management Service
Themes running/auto Themes
TieringEngineService stopped/demand Storage Tiers Management
TimeBrokerSvc running/demand Time Broker
TokenBroker running/demand Web Account Manager
TrkWks running/auto Distributed Link Tracking Client
TroubleshootingSvc stopped/demand Recommended Troubleshooting Service
TrustedInstaller stopped/demand Windows Modules Installer
tzautoupdate stopped/disabled Auto Time Zone Updater
UevAgentService stopped/disabled User Experience Virtualization Service
uhssvc running/auto Microsoft Update Health Service
UmRdpService running/demand Remote Desktop Services UserMode Port Redirector
upnphost stopped/demand UPnP Device Host
UserManager running/auto User Manager
UsoSvc running/auto Update Orchestrator Service
VacSvc stopped/demand Volumetric Audio Compositor Service
VaultSvc running/demand Credential Manager
VBoxService running/auto VirtualBox Guest Additions Service
vds stopped/demand Virtual Disk
vmicguestinterface stopped/demand Hyper-V Guest Service Interface
vmicheartbeat stopped/demand Hyper-V Heartbeat Service
vmickvpexchange stopped/demand Hyper-V Data Exchange Service
vmicrdv stopped/demand Hyper-V Remote Desktop Virtualization Service
vmicshutdown stopped/demand Hyper-V Guest Shutdown Service
vmictimesync stopped/demand Hyper-V Time Synchronization Service
vmicvmsession stopped/demand Hyper-V PowerShell Direct Service
vmicvss stopped/demand Hyper-V Volume Shadow Copy Requestor
VSS stopped/demand Volume Shadow Copy
W32Time running/auto Windows Time
WaaSMedicSvc stopped/demand WaaSMedicSvc
WalletService stopped/demand WalletService
WarpJITSvc stopped/demand Warp JIT Service
wbengine stopped/demand Block Level Backup Engine Service
WbioSrvc stopped/demand Windows Biometric Service
Wcmsvc running/auto Windows Connection Manager
wcncsvc running/demand Windows Connect Now - Config Registrar
WdiServiceHost stopped/demand Diagnostic Service Host
WdiSystemHost running/demand Diagnostic System Host
WdNisSvc running/demand Microsoft Defender Antivirus Network Inspection Service
WebClient stopped/demand WebClient
webthreatdefsvc running/demand Web Threat Defense Service
Wecsvc stopped/demand Windows Event Collector
WEPHOSTSVC stopped/demand Windows Encryption Provider Host Service
wercplsupport stopped/demand Problem Reports Control Panel Support
WerSvc stopped/demand Windows Error Reporting Service
WFDSConMgrSvc stopped/demand Wi-Fi Direct Services Connection Manager Service
WiaRpc stopped/demand Still Image Acquisition Events
WinDefend running/auto Microsoft Defender Antivirus Service
WinHttpAutoProxySvc running/demand WinHTTP Web Proxy Auto-Discovery Service
Winmgmt running/auto Windows Management Instrumentation
WinRM running/auto Windows Remote Management (WS-Management)
wisvc stopped/demand Windows Insider Service
WlanSvc stopped/demand WLAN AutoConfig
wlidsvc stopped/demand Microsoft Account Sign-in Assistant
WLMS running/auto Windows Licensing Monitoring Service
wlpasvc stopped/demand Local Profile Assistant Service
WManSvc stopped/demand Windows Management Service
wmiApSrv stopped/demand WMI Performance Adapter
WMPNetworkSvc stopped/demand Windows Media Player Network Sharing Service
workfolderssvc stopped/demand Work Folders
WpcMonSvc stopped/demand Parental Controls
WPDBusEnum stopped/demand Portable Device Enumerator Service
WpnService running/auto Windows Push Notifications System Service
wscsvc running/auto Security Center
WSearch running/auto Windows Search
wuauserv stopped/demand Windows Update
WwanSvc stopped/demand WWAN AutoConfig
XblAuthManager stopped/demand Xbox Live Auth Manager
XblGameSave stopped/demand Xbox Live Game Save
XboxGipSvc stopped/demand Xbox Accessory Management Service
XboxNetApiSvc stopped/demand Xbox Live Networking Service
AarSvc_1c2957 stopped/demand Agent Activation Runtime_1c2957
BcastDVRUserService_1c2957 stopped/demand GameDVR and Broadcast User Service_1c2957
BluetoothUserService_1c2957 stopped/demand Bluetooth User Support Service_1c2957
CaptureService_1c2957 stopped/demand CaptureService_1c2957
cbdhsvc_1c2957 running/auto Clipboard User Service_1c2957
CDPUserSvc_1c2957 running/auto Connected Devices Platform User Service_1c2957
ConsentUxUserSvc_1c2957 stopped/demand ConsentUX User Service_1c2957
CredentialEnrollmentManagerUserSvc_1c2957 stopped/demand CredentialEnrollmentManagerUserSvc_1c2957
DeviceAssociationBrokerSvc_1c2957 stopped/demand DeviceAssociationBroker_1c2957
DevicePickerUserSvc_1c2957 stopped/demand DevicePicker_1c2957
DevicesFlowUserSvc_1c2957 stopped/demand DevicesFlow_1c2957
MessagingService_1c2957 stopped/demand MessagingService_1c2957
NPSMSvc_1c2957 stopped/demand NPSMSvc_1c2957
OneSyncSvc_1c2957 running/auto Sync Host_1c2957
P9RdrService_1c2957 stopped/demand P9RdrService_1c2957
PenService_1c2957 stopped/demand PenService_1c2957
PimIndexMaintenanceSvc_1c2957 stopped/demand Contact Data_1c2957
PrintWorkflowUserSvc_1c2957 stopped/demand PrintWorkflow_1c2957
UdkUserSvc_1c2957 running/demand Udk User Service_1c2957
UnistoreSvc_1c2957 stopped/demand User Data Storage_1c2957
UserDataSvc_1c2957 stopped/demand User Data Access_1c2957
webthreatdefusersvc_1c2957 running/auto Web Threat Defense User Service_1c2957
WpnUserService_1c2957 running/auto Windows Push Notifications User Service_1c2957
CheckmkService running/auto Checkmk Service
<<<ps:sep(9)>>>
(SYSTEM,0,8,0,0,0,0,70377187500,0,8,0)	System Idle Process
(SYSTEM,0,152,0,4,0,0,586406250,3145,144,0)	System
(SYSTEM,0,41388,0,100,4,0,3437500,0,4,0)	Registry
(SYSTEM,0,1020,0,424,1,0,312500,58,2,0)	smss.exe
(SYSTEM,0,5356,0,528,1,1406250,5781250,563,11,0)	csrss.exe
(SYSTEM,0,6388,0,600,1,156250,781250,142,2,0)	wininit.exe
(SYSTEM,0,5368,0,620,1,3437500,9375000,484,13,0)	csrss.exe
(\\NT AUTHORITY\SYSTEM,2312,11036,0,700,2,625000,1562500,257,3,0)	winlogon.exe
(SYSTEM,0,8800,0,744,4,11406250,22031250,637,6,0)	services.exe
(\\NT AUTHORITY\SYSTEM,6908,19556,0,772,6,22500000,13906250,1314,10,0)	lsass.exe
(\\NT AUTHORITY\SYSTEM,10080,29236,0,880,9,7656250,16093750,1379,11,0)	svchost.exe
(\\Font Driver Host\UMFD-1,3460,6932,0,900,3,781250,468750,40,5,0)	fontdrvhost.exe
(\\Font Driver Host\UMFD-0,1352,2792,0,908,1,0,156250,40,5,0)	fontdrvhost.exe
(\\NT AUTHORITY\NETWORK SERVICE,5932,12976,0,1012,5,75625000,42500000,1069,8,0)	svchost.exe
(\\NT AUTHORITY\SYSTEM,2536,9484,0,488,2,2812500,2656250,318,5,0)	svchost.exe
(\\Window Manager\DWM-1,74256,131220,0,892,72,286718750,117031250,1061,19,0)	dwm.exe
(\\NT AUTHORITY\NETWORK SERVICE,6660,11008,0,1092,6,4218750,2500000,479,26,0)	svchost.exe
(\\NT AUTHORITY\LOCAL SERVICE,1184,4996,0,1160,1,156250,156250,116,3,0)	svchost.exe
(\\NT AUTHORITY\SYSTEM,2368,9240,0,1232,2,468750,0,213,1,0)	svchost.exe
(\\NT AUTHORITY\LOCAL SERVICE,1480,5880,0,1248,1,1093750,1250000,168,2,0)	svchost.exe
(\\NT AUTHORITY\LOCAL SERVICE,1920,9392,0,1284,1,625000,156250,325,2,0)	svchost.exe
(\\NT AUTHORITY\SYSTEM,5636,14716,0,1316,5,2187500,3750000,394,7,0)	svchost.exe
(\\NT AUTHORITY\LOCAL SERVICE,3860,6324,0,1360,3,468750,468750,135,3,0)	svchost.exe
(\\NT AUTHORITY\SYSTEM,2132,9872,0,1448,2,312500,625000,189,2,0)	svchost.exe
(\\NT AUTHORITY\NETWORK SERVICE,5048,14000,0,1460,4,2343750,2031250,888,11,0)	svchost.exe
(\\NT AUTHORITY\LOCAL SERVICE,1204,6252,0,1504,1,312500,468750,115,1,0)	svchost.exe
(\\NT AUTHORITY\SYSTEM,2496,10916,0,1612,2,3750000,5000000,223,5,0)	svchost.exe
(\\NT AUTHORITY\NETWORK SERVICE,3076,8552,0,1812,3,1250000,4218750,313,14,0)	svchost.exe
(\\NT AUTHORITY\SYSTEM,1448,6912,0,1852,1,0,156250,164,2,0)	svchost.exe
(\\NT AUTHORITY\SYSTEM,2176,6072,0,1884,2,4531250,25312500,156,10,0)	VBoxService.exe
(\\NT AUTHORITY\LOCAL SERVICE,16444,17620,0,1936,16,3750000,4687500,402,8,0)	svchost.exe
(\\NT AUTHORITY\LOCAL SERVICE,1792,7620,0,1996,1,156250,312500,167,4,2018)	svchost.exe
(\\NT AUTHORITY\SYSTEM,72216,80708,0,2004,70,314687500,108437500,247,5,2018)	svchost.exe
(\\NT AUTHORITY\SYSTEM,1168,5544,0,2012,1,312500,625000,202,2,2018)	svchost.exe
(SYSTEM,0,41328,0,2068,0,0,43750000,0,22,2018)	Memory Compression
(\\NT AUTHORITY\SYSTEM,1420,6472,0,2148,1,0,312500,176,4,2018)	svchost.exe
(\\NT AUTHORITY\SYSTEM,1756,8164,0,2212,1,468750,156250,174,2,2018)	svchost.exe
(\\NT AUTHORITY\LOCAL SERVICE,2184,7128,0,2256,2,937500,1562500,244,6,2018)	svchost.exe
(\\NT AUTHORITY\SYSTEM,1404,7032,0,2300,1,156250,312500,139,2,2018)	svchost.exe
(\\NT AUTHORITY\NETWORK SERVICE,1800,7412,0,2320,1,312500,156250,183,6,2018)	svchost.exe
(\\NT AUTHORITY\LOCAL SERVICE,1704,6840,0,2332,1,3281250,468750,169,5,2018)	svchost.exe
(\\NT AUTHORITY\LOCAL SERVICE,1900,8876,0,2456,1,312500,312500,232,4,2018)	svchost.exe
(\\NT AUTHORITY\SYSTEM,1868,7940,0,2496,1,156250,156250,203,5,2018)	svchost.exe
(\\NT AUTHORITY\SYSTEM,6112,13532,0,2508,5,18281250,10781250,290,2,2018)	svchost.exe
(\\NT AUTHORITY\LOCAL SERVICE,1884,8108,0,2568,1,781250,2656250,188,3,2018)	svchost.exe
(\\NT AUTHORITY\SYSTEM,1376,6532,0,2624,1,0,156250,160,3,2018)	svchost.exe
(\\NT AUTHORITY\LOCAL SERVICE,1288,6080,0,2732,1,0,0,142,1,2018)	svchost.exe
(\\NT AUTHORITY\LOCAL SERVICE,2296,9232,0,2740,2,937500,937500,422,6,2018)	svchost.exe
(\\NT AUTHORITY\SYSTEM,1852,9948,0,2876,1,156250,312500,183,2,2018)	svchost.exe
(\\NT AUTHORITY\SYSTEM,5040,11816,0,2992,4,468750,468750,408,7,2018)	spoolsv.exe
(\\NT AUTHORITY\LOCAL SERVICE,10372,15232,0,1984,10,5312500,19375000,420,11,2018)	svchost.exe
(\\NT AUTHORITY\NETWORK SERVICE,3840,12740,0,3092,3,625000,1250000,365,5,2018)	svchost.exe
(\\NT AUTHORITY\LOCAL SERVICE,13652,18900,0,3104,13,22343750,7500000,350,15,2018)	svchost.exe
(\\NT AUTHORITY\SYSTEM,15684,27064,0,3128,15,12187500,6562500,587,17,2018)	svchost.exe
(\\NT AUTHORITY\SYSTEM,2512,7368,0,3196,2,0,312500,270,4,2018)	svchost.exe
(\\NT AUTHORITY\SYSTEM,2620,10012,0,3224,2,781250,781250,368,5,2018)	svchost.exe
(SYSTEM,0,19416,0,3244,7,1875000,3750000,448,7,2018)	MpDefenderCoreService.exe
(\\NT AUTHORITY\SYSTEM,2276,8904,0,3252,2,0,625000,204,6,2018)	svchost.exe
(\\NT AUTHORITY\NETWORK SERVICE,1612,6852,0,3292,1,312500,312500,162,3,2018)	svchost.exe
(\\NT AUTHORITY\SYSTEM,1516,6228,0,3324,1,0,312500,115,2,2018)	sshd.exe
(\\NT AUTHORITY\SYSTEM,1184,5296,0,3356,1,0,156250,129,3,2018)	svchost.exe
(SYSTEM,0,116348,0,3384,245,243750000,80625000,885,28,2018)	MsMpEng.exe
(\\NT AUTHORITY\SYSTEM,7712,16572,0,3392,7,25781250,13125000,430,19,2018)	svchost.exe
(\\NT AUTHORITY\NETWORK SERVICE,2808,10960,0,3408,2,625000,156250,233,5,2018)	svchost.exe
(\\NT AUTHORITY\SYSTEM,708,3520,0,3424,0,0,156250,65,2,2018)	wlms.exe
(\\NT AUTHORITY\SYSTEM,4132,18016,0,3472,4,2968750,1875000,387,5,2018)	svchost.exe
(SYSTEM,0,15720,0,4036,7,9062500,12656250,275,4,2017)	sppsvc.exe
(\\NT AUTHORITY\SYSTEM,1904,6744,0,3124,1,156250,781250,113,1,2017)	AggregatorHost.exe
(\\NT AUTHORITY\LOCAL SERVICE,2092,7260,0,4168,2,156250,625000,212,5,2017)	svchost.exe
(SYSTEM,0,9420,0,4972,3,156250,468750,206,3,2008)	NisSrv.exe
(\\NT AUTHORITY\LOCAL SERVICE,2764,9516,0,3608,2,1562500,1250000,236,6,1985)	svchost.exe
(\\DESKTOP-RGL29KA\vagrant,5720,28696,0,4804,5,7968750,9843750,570,12,1984)	sihost.exe
(\\DESKTOP-RGL29KA\vagrant,4740,17028,0,4880,4,4218750,3593750,319,3,1984)	svchost.exe
(\\DESKTOP-RGL29KA\vagrant,1412,7092,0,4956,1,156250,0,133,2,1984)	svchost.exe
(\\DESKTOP-RGL29KA\vagrant,6260,24136,0,4064,6,6875000,2812500,382,2,1984)	svchost.exe
(\\NT AUTHORITY\SYSTEM,3116,16604,0,3088,3,3437500,2968750,242,3,1984)	svchost.exe
(\\DESKTOP-RGL29KA\vagrant,6100,16032,0,4176,5,781250,625000,264,6,1984)	taskhostw.exe
(\\NT AUTHORITY\LOCAL SERVICE,3964,14172,0,1976,3,1093750,1875000,316,8,1984)	svchost.exe
(\\DESKTOP-RGL29KA\vagrant,68700,187048,0,3168,67,140781250,152031250,3330,63,1984)	explorer.exe
(\\DESKTOP-RGL29KA\vagrant,5812,27140,0,5216,5,3125000,2812500,409,14,1983)	svchost.exe
(\\NT AUTHORITY\SYSTEM,1080,5464,0,5348,1,0,0,108,1,1983)	svchost.exe
(\\DESKTOP-RGL29KA\vagrant,115448,74532,0,5732,112,21718750,13750000,1501,59,1982)	SearchHost.exe
(\\DESKTOP-RGL29KA\vagrant,33320,75852,0,5740,32,8906250,8125000,702,8,1982)	StartMenuExperienceHost.exe
(\\DESKTOP-RGL29KA\vagrant,5404,22496,0,5940,5,1250000,2343750,296,2,1982)	RuntimeBroker.exe
(\\DESKTOP-RGL29KA\vagrant,6392,32316,0,5968,6,2656250,2812500,609,6,1982)	Widgets.exe
(\\DESKTOP-RGL29KA\vagrant,4948,22116,0,6036,4,1250000,1875000,369,7,1982)	RuntimeBroker.exe
(\\NT AUTHORITY\SYSTEM,2800,10484,0,6052,2,12812500,12968750,202,4,1982)	svchost.exe
(\\DESKTOP-RGL29KA\vagrant,1312,7212,0,612,1,156250,156250,131,1,1982)	svchost.exe
(\\DESKTOP-RGL29KA\vagrant,6092,11820,0,6228,5,0,1093750,257,7,1981)	dllhost.exe
(\\NT AUTHORITY\NETWORK SERVICE,1624,7784,0,6296,1,0,0,153,1,1981)	SppExtComObj.Exe
(\\DESKTOP-RGL29KA\vagrant,4676,20912,0,6792,4,6250000,10000000,466,10,1980)	ctfmon.exe
(\\NT AUTHORITY\LOCAL SERVICE,3964,16740,0,7048,3,625000,625000,296,3,1979)	svchost.exe
(\\NT AUTHORITY\SYSTEM,10748,19956,0,7280,14,10468750,9531250,284,8,1975)	WmiPrvSE.exe
(\\NT AUTHORITY\LOCAL SERVICE,2004,7264,0,7460,1,1718750,156250,232,7,1975)	svchost.exe
(\\NT AUTHORITY\SYSTEM,24580,38608,0,7848,24,1046562500,288593750,756,9,1973)	SearchIndexer.exe
(\\NT AUTHORITY\LOCAL SERVICE,2304,9464,0,2640,2,312500,781250,212,4,1972)	svchost.exe
(\\DESKTOP-RGL29KA\vagrant,1704,9588,0,6720,1,312500,312500,180,1,1970)	SecurityHealthSystray.exe
(SYSTEM,0,18068,0,6208,6,3593750,3281250,563,9,1970)	SecurityHealthService.exe
(\\DESKTOP-RGL29KA\vagrant,2424,10420,0,5616,2,1250000,1875000,254,11,1970)	VBoxTray.exe
(\\DESKTOP-RGL29KA\vagrant,47300,86824,0,7968,46,16406250,14531250,818,21,1969)	OneDrive.exe
(\\DESKTOP-RGL29KA\vagrant,2540,9780,0,8400,2,781250,625000,173,2,1966)	privoxy.exe
(\\DESKTOP-RGL29KA\vagrant,43328,41640,0,8504,42,43750000,14062500,660,9,1963)	powershell.exe
(\\DESKTOP-RGL29KA\vagrant,3404,15956,0,8512,3,781250,3750000,196,3,1963)	conhost.exe
(\\NT AUTHORITY\SYSTEM,4520,13488,0,8860,4,30156250,17968750,401,10,1957)	svchost.exe
(\\NT AUTHORITY\SYSTEM,2212,10308,0,3320,2,312500,156250,188,1,1897)	svchost.exe
(\\NT AUTHORITY\SYSTEM,1296,5612,0,6048,1,156250,468750,118,3,1897)	uhssvc.exe
(\\NT AUTHORITY\SYSTEM,2436,10632,0,8384,2,468750,1093750,202,7,1896)	svchost.exe
(\\NT AUTHORITY\LOCAL SERVICE,1544,6744,0,8368,1,0,312500,197,4,1896)	svchost.exe
(SYSTEM,0,9880,0,2756,2,156250,468750,218,7,1896)	svchost.exe
(\\DESKTOP-RGL29KA\vagrant,2756,11996,0,5592,2,312500,468750,259,1,1896)	svchost.exe
(\\DESKTOP-RGL29KA\vagrant,30492,1232,0,1132,29,8281250,3906250,1044,22,1839)	SystemSettings.exe
(\\DESKTOP-RGL29KA\vagrant,10516,26428,0,8172,10,312500,1562500,354,3,1839)	ApplicationFrameHost.exe
(\\DESKTOP-RGL29KA\vagrant,12932,43160,0,4364,12,3281250,2656250,654,21,1776)	ShellExperienceHost.exe
(\\DESKTOP-RGL29KA\vagrant,3084,16244,0,1628,3,468750,1093750,243,5,1775)	RuntimeBroker.exe
(\\DESKTOP-RGL29KA\vagrant,30392,95784,0,6952,29,5000000,8906250,1173,43,1680)	msedgewebview2.exe
(\\DESKTOP-RGL29KA\vagrant,2016,6996,0,4104,1,312500,625000,145,7,1680)	msedgewebview2.exe
(\\DESKTOP-RGL29KA\vagrant,16976,45656,0,8704,16,937500,2031250,396,19,1679)	msedgewebview2.exe
(\\DESKTOP-RGL29KA\vagrant,10052,29420,0,4968,9,937500,781250,313,15,1679)	msedgewebview2.exe
(\\DESKTOP-RGL29KA\vagrant,7484,16448,0,6600,7,156250,312500,159,8,1679)	msedgewebview2.exe
(\\DESKTOP-RGL29KA\vagrant,32676,64832,0,2952,31,2968750,1875000,281,15,1679)	msedgewebview2.exe
(\\NT AUTHORITY\SYSTEM,2596,9528,0,4640,2,312500,0,340,10,1460)	svchost.exe
(\\NT AUTHORITY\SYSTEM,1460,6340,0,7200,1,156250,0,139,2,1116)	svchost.exe
(\\DESKTOP-RGL29KA\vagrant,1296,4736,0,8216,1,0,0,75,1,835)	git-bash.exe
(\\DESKTOP-RGL29KA\vagrant,8784,18160,0,7436,8,6718750,9375000,295,6,835)	mintty.exe
(\\DESKTOP-RGL29KA\vagrant,5760,14044,0,7832,5,156250,468750,131,3,834)	conhost.exe
(\\DESKTOP-RGL29KA\vagrant,7404,10316,0,3824,7,3125000,3593750,174,3,834)	bash.exe
(\\DESKTOP-RGL29KA\vagrant,51956,162172,0,6868,50,113281250,78906250,1472,42,805)	chrome.exe
(\\DESKTOP-RGL29KA\vagrant,6508,8256,0,2728,6,312500,156250,167,7,805)	chrome.exe
(\\DESKTOP-RGL29KA\vagrant,17620,86172,0,8784,17,87968750,89062500,346,17,804)	chrome.exe
(\\DESKTOP-RGL29KA\vagrant,15880,38852,0,2936,15,8125000,5781250,347,16,804)	chrome.exe
(\\DESKTOP-RGL29KA\vagrant,7544,18688,0,5792,7,468750,468750,193,9,804)	chrome.exe
(\\DESKTOP-RGL29KA\vagrant,126236,198804,0,7032,123,325468750,47500000,1252,16,803)	chrome.exe
(\\DESKTOP-RGL29KA\vagrant,14120,28952,0,3760,13,0,625000,227,14,802)	chrome.exe
(\\DESKTOP-RGL29KA\vagrant,20040,50208,0,4396,19,1093750,2187500,724,36,685)	CHXSmartScreen.exe
(\\NT AUTHORITY\SYSTEM,11272,22368,0,1104,11,32500000,29843750,418,19,672)	check_mk_agent.exe
(\\NT AUTHORITY\SYSTEM,2100,7772,0,5132,2,156250,156250,125,5,672)	cmk-agent-ctl.exe
(\\NT AUTHORITY\SYSTEM,2784,9492,0,6244,2,1562500,5000000,142,9,671)	robotmk_scheduler.exe
(\\NT AUTHORITY\SYSTEM,5656,12696,0,4884,5,2812500,5937500,149,4,671)	conhost.exe
(\\DESKTOP-RGL29KA\vagrant,83668,104460,0,4124,81,37343750,22343750,951,46,634)	Code.exe
(\\DESKTOP-RGL29KA\vagrant,14324,26940,0,9204,13,0,156250,216,8,634)	Code.exe
(\\DESKTOP-RGL29KA\vagrant,19584,84132,0,7596,19,80937500,47968750,318,18,634)	Code.exe
(\\DESKTOP-RGL29KA\vagrant,16364,39292,0,2944,15,937500,1406250,291,13,634)	Code.exe
(\\DESKTOP-RGL29KA\vagrant,181952,217900,0,4704,177,206093750,27500000,453,17,633)	Code.exe
(\\DESKTOP-RGL29KA\vagrant,96292,119440,0,7028,94,16875000,3125000,277,19,632)	Code.exe
(\\DESKTOP-RGL29KA\vagrant,81144,103552,0,4772,79,22968750,8125000,281,19,632)	Code.exe
(\\DESKTOP-RGL29KA\vagrant,63804,86240,0,5056,62,14375000,3125000,231,20,632)	Code.exe
(\\DESKTOP-RGL29KA\vagrant,24940,84772,0,3628,24,2812500,468750,180,8,459)	Code.exe
(\\NT AUTHORITY\SYSTEM,3900,11388,0,8004,3,45312500,30468750,388,6,347)	SearchProtocolHost.exe
(\\NT AUTHORITY\NETWORK SERVICE,4108,11680,0,536,3,468750,781250,197,8,119)	WmiPrvSE.exe
(\\NT AUTHORITY\LOCAL SERVICE,5692,13448,0,6584,5,781250,1875000,262,8,119)	WmiPrvSE.exe
(\\NT AUTHORITY\SYSTEM,2776,1300,0,1736,0,0,0,2,1,0)	robotmk_agent_plugin.exe
<<<dotnet_clrmemory:sep(124)>>>
AllocatedBytesPersec|Caption|Description|FinalizationSurvivors|Frequency_Object|Frequency_PerfTime|Frequency_Sys100NS|Gen0heapsize|Gen0PromotedBytesPerSec|Gen1heapsize|Gen1PromotedBytesPerSec|Gen2heapsize|LargeObjectHeapsize|Name|NumberBytesinallHeaps|NumberGCHandles|NumberGen0Collections|NumberGen1Collections|NumberGen2Collections|NumberInducedGC|NumberofPinnedObjects|NumberofSinkBlocksinuse|NumberTotalcommittedBytes|NumberTotalreservedBytes|PercentTimeinGC|PercentTimeinGC_Base|ProcessID|PromotedFinalizationMemoryfromGen0|PromotedMemoryfromGen0|PromotedMemoryfromGen1|Timestamp_Object|Timestamp_PerfTime|Timestamp_Sys100NS|WMIStatus
13693568|||91|0|10000000|10000000|53748040|2696064|2734888|0|24|555296|_Global_|3290208|314|1|0|0|0|2|24|6873088|402644992|882843|4294967295|0|8662|2696064|0|0|20242654129|133814863204600000|OK
6846784|||91|0|10000000|10000000|53748040|2696064|2734888|0|24|555296|powershell|3290208|314|1|0|0|0|2|24|6873088|402644992|128606|625658393|8504|8662|2696064|0|0|20242654129|133814863204600000|OK
<<<>>>
<<<robotmk_config_v2:sep(0)>>>
{"FileContent":"{\r\n    \"runtime_directory\": \"C:\\\\ProgramData\\\\checkmk\\\\agent\\\\robotmk_output\",\r\n    \"rcc_config\": {\r\n        \"binary_path\": \"C:\\\\ProgramData\\\\checkmk\\\\agent\\\\bin\\\\rcc.exe\",\r\n        \"profile_config\": \"Default\",\r\n        \"robocorp_home_base\": \"C:\\\\robotmk\\\\rcc_home\"\r\n    },\r\n    \"plan_groups\": [\r\n        {\r\n            \"plans\": [\r\n                {\r\n                    \"id\": \"gtrack_suite\",\r\n                    \"source\": {\r\n                        \"Manual\": {\r\n                            \"base_dir\": \"c:\\\\robots\"\r\n                        }\r\n                    },\r\n                    \"robot_config\": {\r\n                        \"robot_target\": \"kpi-monitoring\\\\suite.robot\",\r\n                        \"top_level_suite_name\": null,\r\n                        \"suites\": [],\r\n                        \"tests\": [],\r\n                        \"test_tags_include\": [],\r\n                        \"test_tags_exclude\": [],\r\n                        \"variables\": [],\r\n                        \"variable_files\": [],\r\n                        \"argument_files\": [],\r\n                        \"exit_on_failure\": false,\r\n                        \"environment_variables_rendered_obfuscated\": []\r\n                    },\r\n                    \"execution_config\": {\r\n                        \"n_attempts_max\": 1,\r\n                        \"retry_strategy\": \"Complete\",\r\n                        \"timeout\": 60\r\n                    },\r\n                    \"environment_config\": {\r\n                        \"Rcc\": {\r\n                            \"robot_yaml_path\": \"kpi-monitoring\\\\robot.yaml\",\r\n                            \"build_timeout\": 600,\r\n                            \"remote_origin\": null,\r\n                            \"catalog_zip\": null\r\n                        }\r\n                    },\r\n                    \"session_config\": \"Current\",\r\n                    \"working_directory_cleanup_config\": {\r\n                        \"MaxAgeSecs\": 1209600\r\n                    },\r\n                    \"host\": \"Source\",\r\n                    \"metadata\": {\r\n                        \"application\": \"gtrack\",\r\n                        \"suite_name\": \"suite\",\r\n                        \"variant\": \"\"\r\n                    }\r\n                }\r\n            ],\r\n            \"execution_interval\": 60\r\n        }\r\n    ]\r\n}\r\n"}
<<<robotmk_environment_build_states:sep(0)>>>
{"gtrack_suite":{"Complete":{"Success":64}}}
<<<robotmk_plan_execution_report:sep(0)>>>
{"plan_id":"gtrack_suite","timestamp":1737041460,"attempts":[{"index":1,"outcome":"AllTestsPassed","runtime":9}],"rebot":{"Ok":{"xml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<robot generator=\"Rebot 7.1 (Python 3.12.8 on win32)\" generated=\"2025-01-16T07:31:11.324251\" rpa=\"false\" schemaversion=\"5\">\r\n<suite id=\"s1\" name=\"Suite\" source=\"c:\\robots\\kpi-monitoring\\suite.robot\">\r\n<test id=\"s1-t1\" name=\"Flight Booking Functionality\" line=\"13\">\r\n<kw name=\"Monitor Subsequent Keyword Runtime\" owner=\"RobotmkLibrary\">\r\n<msg time=\"2025-01-16T07:31:01.876560\" level=\"INFO\">The subsequent keyword will be discovered in Checkmk as: \"1. Search Flight\"</msg>\r\n<arg>discover_as=1. Search Flight</arg>\r\n<status status=\"PASS\" start=\"2025-01-16T07:31:01.875428\" elapsed=\"0.001132\"/>\r\n</kw>\r\n<kw name=\"Search Flight\">\r\n<kw name=\"Random Sleep\">\r\n<kw name=\"Evaluate\" owner=\"BuiltIn\">\r\n<msg time=\"2025-01-16T07:31:01.876560\" level=\"INFO\">${randomWait} = 2.7989605528049193</msg>\r\n<var>${randomWait}</var>\r\n<arg>random.uniform(${sec1},${sec2})</arg>\r\n<arg>random</arg>\r\n<doc>Evaluates the given expression in Python and returns the result.</doc>\r\n<status status=\"PASS\" start=\"2025-01-16T07:31:01.876560\" elapsed=\"0.000000\"/>\r\n</kw>\r\n<kw name=\"Sleep\" owner=\"BuiltIn\">\r\n<msg time=\"2025-01-16T07:31:04.675878\" level=\"INFO\">Slept 2 seconds 799 milliseconds.</msg>\r\n<arg>${randomWait}</arg>\r\n<doc>Pauses the test executed for the given time.</doc>\r\n<status status=\"PASS\" start=\"2025-01-16T07:31:01.876560\" elapsed=\"2.799318\"/>\r\n</kw>\r\n<arg>1</arg>\r\n<arg>3</arg>\r\n<status status=\"PASS\" start=\"2025-01-16T07:31:01.876560\" elapsed=\"2.799318\"/>\r\n</kw>\r\n<status status=\"PASS\" start=\"2025-01-16T07:31:01.876560\" elapsed=\"2.799318\"/>\r\n</kw>\r\n<kw name=\"Monitor Subsequent Keyword Runtime\" owner=\"RobotmkLibrary\">\r\n<msg time=\"2025-01-16T07:31:04.675878\" level=\"INFO\">The subsequent keyword will be discovered in Checkmk as: \"2. Book Flight\"</msg>\r\n<arg>discover_as=2. Book Flight</arg>\r\n<status status=\"PASS\" start=\"2025-01-16T07:31:04.675878\" elapsed=\"0.000000\"/>\r\n</kw>\r\n<kw name=\"Book Flight\">\r\n<kw name=\"Random Sleep\">\r\n<kw name=\"Evaluate\" owner=\"BuiltIn\">\r\n<msg time=\"2025-01-16T07:31:04.675878\" level=\"INFO\">${randomWait} = 1.8172876832915354</msg>\r\n<var>${randomWait}</var>\r\n<arg>random.uniform(${sec1},${sec2})</arg>\r\n<arg>random</arg>\r\n<doc>Evaluates the given expression in Python and returns the result.</doc>\r\n<status status=\"PASS\" start=\"2025-01-16T07:31:04.675878\" elapsed=\"0.000000\"/>\r\n</kw>\r\n<kw name=\"Sleep\" owner=\"BuiltIn\">\r\n<msg time=\"2025-01-16T07:31:06.494178\" level=\"INFO\">Slept 1 second 817 milliseconds.</msg>\r\n<arg>${randomWait}</arg>\r\n<doc>Pauses the test executed for the given time.</doc>\r\n<status status=\"PASS\" start=\"2025-01-16T07:31:04.675878\" elapsed=\"1.818300\"/>\r\n</kw>\r\n<arg>1</arg>\r\n<arg>3</arg>\r\n<status status=\"PASS\" start=\"2025-01-16T07:31:04.675878\" elapsed=\"1.818300\"/>\r\n</kw>\r\n<status status=\"PASS\" start=\"2025-01-16T07:31:04.675878\" elapsed=\"1.818300\"/>\r\n</kw>\r\n<kw name=\"Monitor Subsequent Keyword Runtime\" owner=\"RobotmkLibrary\">\r\n<msg time=\"2025-01-16T07:31:06.494178\" level=\"INFO\">The subsequent keyword will be discovered in Checkmk as: \"3. Confirm Flight\"</msg>\r\n<arg>discover_as=3. Confirm Flight</arg>\r\n<status status=\"PASS\" start=\"2025-01-16T07:31:06.494178\" elapsed=\"0.000000\"/>\r\n</kw>\r\n<kw name=\"Confirm Flight\">\r\n<kw name=\"Random Sleep\">\r\n<kw name=\"Evaluate\" owner=\"BuiltIn\">\r\n<msg time=\"2025-01-16T07:31:06.494178\" level=\"INFO\">${randomWait} = 2.2132471915668646</msg>\r\n<var>${randomWait}</var>\r\n<arg>random.uniform(${sec1},${sec2})</arg>\r\n<arg>random</arg>\r\n<doc>Evaluates the given expression in Python and returns the result.</doc>\r\n<status status=\"PASS\" start=\"2025-01-16T07:31:06.494178\" elapsed=\"0.000000\"/>\r\n</kw>\r\n<kw name=\"Sleep\" owner=\"BuiltIn\">\r\n<msg time=\"2025-01-16T07:31:08.708104\" level=\"INFO\">Slept 2 seconds 213 milliseconds.</msg>\r\n<arg>${randomWait}</arg>\r\n<doc>Pauses the test executed for the given time.</doc>\r\n<status status=\"PASS\" start=\"2025-01-16T07:31:06.494178\" elapsed=\"2.213926\"/>\r\n</kw>\r\n<arg>1</arg>\r\n<arg>3</arg>\r\n<status status=\"PASS\" start=\"2025-01-16T07:31:06.494178\" elapsed=\"2.213926\"/>\r\n</kw>\r\n<status status=\"PASS\" start=\"2025-01-16T07:31:06.494178\" elapsed=\"2.213926\"/>\r\n</kw>\r\n<status status=\"PASS\" start=\"2025-01-16T07:31:01.868305\" elapsed=\"6.839799\"/>\r\n</test>\r\n<doc>A test suite which demonstrates how to flag certain Robot Framework\r\nKeywords as KPIs which are then discovered in Checkmk as separate services.\r\nFor this, the keyword Monitor Subsequent Keyword Runtime is used.\r\nThe argument discover_as is used to override the default service name in order to\r\ngive them a number prefix for better sorting in Checkmk.</doc>\r\n<status status=\"PASS\" start=\"2025-01-16T07:31:01.486025\" elapsed=\"7.222804\"/>\r\n</suite>\r\n<statistics>\r\n<total>\r\n<stat pass=\"1\" fail=\"0\" skip=\"0\">All Tests</stat>\r\n</total>\r\n<tag>\r\n</tag>\r\n<suite>\r\n<stat pass=\"1\" fail=\"0\" skip=\"0\" id=\"s1\" name=\"Suite\">Suite</stat>\r\n</suite>\r\n</statistics>\r\n<errors>\r\n</errors>\r\n</robot>\r\n","html_base64":"","timestamp":1737041469}},"config":{"interval":60,"timeout":60,"n_attempts_max":1},"metadata":{"application":"gtrack","suite_name":"suite","variant":""}}
<<<robotmk_scheduler_phase:sep(0)>>>
"Scheduling"
<<<robotmk_setup_failures:sep(0)>>>
[]
<<<>>>
<<<systemtime>>>
1737041520
